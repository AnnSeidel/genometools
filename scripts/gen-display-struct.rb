#!/usr/bin/env ruby

def keywords(display_options)
  extra = ["alignment","polinfo","fstperquery","failed_seed","seed_in_align"]
  kws = Array.new()
  idx = 0
  display_options.each do |arg,helpline|
    incolumn = if extra.member?(arg) then "false" else "true" end
    kws.push([arg,idx,incolumn])
    idx += 1
  end
  return kws
end

# The following help line defines which keywords can be used as arguments
#  to option -outfmt. Each keyword follows a newline and ends with a :. This
#  is exploited by generating the list of possible keyword for
#  checking the -outfmt argument list generated by
#  gt_se_help2display_strings. The list of keywords must correspond
#  to the type above.

display_options = [
  ["alignment",   "display alignment (possibly followed by =<number> to " +
                  "specify width of alignment columns)"],
  ["cigar",       "show cigar string representing alignment"],
  ["polinfo",     "display polishing information for displayed alignment"],
  ["fstperquery", "output only the first found match per query"],
  ["seed",        "display the seed of the match, i.e. the length and " +
                  "the start position of the seed in both instances"],
  ["failed_seed", "display the seed of the match that was extended, " +
                  "but failed (after extension) the filter conditions"],
  ["seed_in_algn","display the seed in alignment"],
  ["seqlength",   "display length of sequences in which " +
                  "the two match-instances occur"],
  ["evalue",      "display evalue"],
  ["s.seqdesc",   "display sequence description of subject sequence"],
  ["q.seqdesc",   "display sequence description of query sequence"],
  ["bitscore",    "display bit score"]]

class String
  def dot2us
    return self.gsub(/\./,"_").capitalize
  end
end

puts <<'EOF'
typedef struct
{
  const char *name;
  int rank;
  bool incolumn;
} GtSEdisplayStruct;

static GtSEdisplayStruct gt_display_arguments_table[] =
{
EOF

kws = keywords(display_options)

puts kws.sort {|a,b| a[0] <=> b[0]}.
         map{|s,idx,f| "  {\"#{s}\", #{idx}, #{f}}"}.join(",\n")

puts <<'EOF'
};

typedef enum
{
EOF

puts kws.map{|s,idx,f| "  Gt_#{s.dot2us}_display"}.join(",\n")

puts <<EOF
} GtSeedExtendDisplay_enum;

const char *gt_querymatch_display_help(void)
{
  return "specify what information about the matches to display\\n\"
EOF

longest = 0
display_options.each do |arg,helpline|
  if longest < arg.length
    longest = arg.length
  end
end

def indent(longest,arg)
  return " " * (longest - arg.length + 1)
end

def format(longest,helpline)
  len = longest + 3
  out = Array.new()
  helpline.split(/\s/).each do |w|
    if len + w.length <= 58
      out.push(w)
      len += w.length
    else
      out.push("\\n\"\n" + " " * 9 + "\"" + " " * (longest+2) + w)
      len = longest + 1 + w.length
    end
  end
  return out.join(" ")
end

display_options.each do |arg,helpline|
  puts " " * 9 + "\"#{arg}:#{indent(longest,arg)}#{format(longest,helpline)}\\n\""
end

puts ";}"
