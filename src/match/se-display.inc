/* This file was generated by ./scripts/gen-display-struct.rb, do NOT edit. */
typedef struct
{
  const char *name;
  int rank;
  bool incolumn;
} GtSEdisplayStruct;

struct GtSeedExtendDisplayFlag
{
  unsigned int flags;
  bool a_seedpos_relative, b_seedpos_relative;
  GtUword alignmentwidth;
};

static GtSEdisplayStruct gt_display_arguments_table[] =
{
  {"alignment", 0, false},
  {"bitscore", 14, true},
  {"cigar", 5, true},
  {"evalue", 13, true},
  {"failed_seed", 3, false},
  {"fstperquery", 4, false},
  {"polinfo", 2, false},
  {"q.desc", 7, true},
  {"q.seqlen", 12, true},
  {"s.desc", 6, true},
  {"s.seqlen", 11, true},
  {"seed.len", 8, true},
  {"seed.q.start", 10, true},
  {"seed.s.start", 9, true},
  {"seed_in_algn", 1, false}
};

#define GT_DISPLAY_LARGEST_FLAG 14

const char *gt_querymatch_display_help(void)
{
  return "specify what information about the matches to display\n"
         "alignment:    display alignment (possibly followed by \n"
         "              =<number> to specify width of alignment columns)\n"
         "seed_in_algn: display the seed in alignment\n"
         "polinfo:      display polishing information for displayed \n"
         "              alignment\n"
         "failed_seed:  display the seed of the match that was extended, but \n"
         "              failed (after extension) the filter conditions\n"
         "fstperquery:  output only the first found match per query\n"
         "cigar:        show cigar string representing alignment\n"
         "s.desc:       display sequence description of subject sequence\n"
         "q.desc:       display sequence description of query sequence\n"
         "seed.len:     display length seed of the match\n"
         "seed.s.start: display start position of seed in subject\n"
         "seed.q.start: display start position of seed in query\n"
         "s.seqlen:     display length of subject sequence in which match \n"
         "              occurs\n"
         "q.seqlen:     display length of query sequence in which match \n"
         "              occurs\n"
         "evalue:       display evalue\n"
         "bitscore:     display bit score\n"
;
}

static unsigned int gt_display_mask(int shift)
{
  return 1U << shift;
}

static bool gt_querymatch_display_on(const GtSeedExtendDisplayFlag
                                       *display_flag,
                                     GtSeedExtendDisplay_enum display)
{
  gt_assert((int) display <= GT_DISPLAY_LARGEST_FLAG);
  return (display_flag != NULL &&
          (display_flag->flags & gt_display_mask(display))) ? true : false;
}

bool gt_querymatch_seed_in_algn_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Seed_in_algn_display);
}

bool gt_querymatch_polinfo_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Polinfo_display);
}

bool gt_querymatch_failed_seed_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Failed_seed_display);
}

bool gt_querymatch_fstperquery_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Fstperquery_display);
}

bool gt_querymatch_cigar_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Cigar_display);
}

bool gt_querymatch_s_desc_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_S_desc_display);
}

bool gt_querymatch_q_desc_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Q_desc_display);
}

bool gt_querymatch_seed_len_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Seed_len_display);
}

bool gt_querymatch_seed_s_start_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Seed_s_start_display);
}

bool gt_querymatch_seed_q_start_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Seed_q_start_display);
}

bool gt_querymatch_s_seqlen_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_S_seqlen_display);
}

bool gt_querymatch_q_seqlen_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Q_seqlen_display);
}

bool gt_querymatch_evalue_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Evalue_display);
}

bool gt_querymatch_bitscore_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Bitscore_display);
}
